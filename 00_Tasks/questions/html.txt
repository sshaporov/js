1. Что такое HTML
HTML - это язык разметки. Стандартизированный язык, позволяющий создавать форматированный текст. Браузер интерпритирует его и 
отображается в виде html-страницы


2. Что такое doctype
doctype используется для указания типа документа. Добавляется он первойц строкой html или xhtml документа. Служит для того, чтобы
понять как браузеру интерпритировать страницу и с каким стандартом осуществлять парсинг документа
<!DOCTYPE html>


3. Базовая структура HTML страницы
<!DOCTYPE html>
<html>
 <head>
  <meta charset="UTF-8">
  <title>My page title</title>
 </head>
 <body>
  <h1>Заголовок первого уровня</h1>
 </body>
</html>


4. DOM (Document Object Model)
DOM – объектная модель документа, которая представляет все содержимое страницы в виде объектов, которые можно менять.
Объект document – основная «входная точка». С его помощью мы можем что-то создавать или менять на странице.
DOM является программным интерфейсом для HTML, XML и SVG документов
Пример:
  // заменим цвет фона на красный,
  document.body.style.background = "red";
  // а через секунду вернём как было
  setTimeout(() => document.body.style.background = "", 1000);


5. BOM (Browser Object Model)
Объектная модель браузера (Browser Object Model, BOM) – это дополнительные объекты, предоставляемые браузером (окружением), чтобы 
работать со всем, кроме документа.
- Объект navigator даёт информацию о самом браузере и операционной системе.
- Объект location позволяет получить текущий URL и перенаправить браузер по новому адресу (принимает и возвращает string)
  console.log(location.href) // получить текущий урл
  location.href = "https://wikipedia.org"; // перенаправляет браузер на другой URL
- Функции alert/confirm/prompt


6. CSSOM (CSS Object Model)
CSS Object Model представляет собой набор API-интерфейсов, позволяющих манипулировать CSS из JavaScript. Это очень похоже на DOM, 
но для CSS, а не HTML. Это позволяет пользователям динамически читать и изменять стиль CSS.


7. Спецификации DOM, CSSOM, HTML
Спецификация DOM описывает структуру документа, манипуляции с контентом и события, подробнее на https://dom.spec.whatwg.org
Спецификация CSSOM описывает файлы стилей, правила написания стилей и манипуляций с ними, а также то, как это всё связано со страницей, подробнее на https://www.w3.org/TR/cssom-1/
Спецификация HTML описывает язык HTML (например, теги) и BOM (объектную модель браузера) – разные функции браузера: setTimeout, 
alert, location и так далее, подробнее на https://html.spec.whatwg.org. Тут берётся за основу спецификация DOM и расширяется 
дополнительными свойствами и методами.


8. DOM дерево
DOM – это представление HTML-документа в виде дерева тегов. Каждый узел этого дерева – это объект. Теги являются узлами-элементами 
(или просто элементами). Они образуют структуру дерева: <html> – это корневой узел, <head> и <body> его дочерние узлы. Текст внутри 
элементов образует текстовые узлы и у него не может быть потомков


9. Автоисправление HTML документа
Если браузер сталкивается с некорректно написанным HTML-кодом, он автоматически корректирует его при построении DOM.
В начале документа всегда должен быть тег <html>. Даже если его нет в документе – он будет в дереве DOM, браузер его создаст. 
То же самое касается и тега <body>. Например, если HTML-файл состоит из единственного слова "Привет", браузер обернёт его в теги 
<html> и <body>, добавит необходимый тег <head>
Таблицы всегда содержат <tbody> - по стандарту DOM у них должен быть <tbody>, но в HTML их можно написать (официально) без него. 
В этом случае браузер добавляет <tbody> в DOM самостоятельно.
Все, что есть в HTML, даже комментарии, является частью DOM.


10. Навигация по DOM-элементам
Все операции с DOM начинаются с объекта document. Это главная «точка входа» в DOM. Из него мы можем получить доступ к любому узлу.
  <html> = document.documentElement
  <body> = document.body
  <head> = document.head
childNodes - находятся и текстовые узлы и узлы-элементы и узлы-комментарии (для перебора коллекции мы можем использовать for..of)
children – коллекция детей, которые являются элементами.
firstElementChild, lastElementChild – первый и последний дочерний элемент.
previousElementSibling, nextElementSibling – соседи-элементы.
parentElement – родитель-элемент.

11. Таблицы HTML
Элемент <table>, в дополнение к свойствам, о которых речь шла выше, поддерживает следующие:
  table.rows – коллекция строк <tr> таблицы
  table.caption/tHead/tFoot – ссылки на элементы таблицы <caption>, <thead>, <tfoot>
  table.tBodies – коллекция элементов таблицы <tbody> (по спецификации их может быть больше одного)
  <thead>, <tfoot>, <tbody> предоставляют свойство rows:
    tbody.rows – коллекция строк <tr> секции
    <tr>:
      tr.cells – коллекция <td> и <th> ячеек, находящихся внутри строки <tr>
      tr.sectionRowIndex – номер строки <tr> в текущей секции <thead>/<tbody>/<tfoot>
      tr.rowIndex – номер строки <tr> в таблице (включая все строки таблицы)
    <td> and <th>:
      td.cellIndex – номер ячейки в строке <tr>


12. Поиск: getElement*, querySelector*

Метод	                    Ищет по...	   Ищет внутри элемента?	Возвращает живую коллекцию?
querySelector	            CSS-selector	           ✔	                     -
querySelectorAll	        CSS-selector	           ✔	                     -
getElementById	          id	                     -	                     -
getElementsByName	        name	                   -	                     ✔
getElementsByTagName	    tag or '*'	             ✔	                     ✔
getElementsByClassName	  class	                   ✔	                     ✔

Часто используемыми являются методы querySelector и querySelectorAll, но и методы getElement(s)By* могут быть полезны.
Методы:
  - Есть метод elem.matches(css), который проверяет, удовлетворяет ли элемент CSS-селектору.
  - Метод elem.closest(css) ищет ближайшего по иерархии предка, соответствующему данному CSS-селектору. Сам элемент также включён в поиск.
  - elemA.contains(elemB) вернёт true, если elemB находится внутри elemA (elemB потомок elemA) или когда elemA==elemB.


13. Примеры значений поиска querySelector / querySelectorAll
".className" - по имени класса
"p" - по имени тэга (в данном случае параграф)
"#test"  - по идентификатору
"div.highlighted > p" - по вложенности (находим все параграфы вложенные в див который имеет класс highlighted)
"input[type="submit"]" - по атрибутам (находит инпут с типом submit)


14. Свойства узлов: тип, тег и содержимое
// https://learn.javascript.ru/basic-dom-node-properties
У разных DOM-узлов могут быть разные свойства. Например, у узла, соответствующего тегу <a>, есть свойства, связанные со ссылками, 
а у соответствующего тегу <input> – свойства, связанные с полем ввода и т.д. Текстовые узлы отличаются от узлов-элементов. 
Но у них есть общие свойства и методы, потому что все классы DOM-узлов образуют единую иерархию.
Существуют следующие классы:
  - EventTarget – это корневой «абстрактный» класс. Объекты этого класса никогда не создаются. Он служит основой, благодаря которой 
    все DOM-узлы поддерживают так называемые «события», о которых мы поговорим позже.
  - Node – также является «абстрактным» классом, и служит основой для DOM-узлов. Он обеспечивает базовую функциональность: parentNode, 
    nextSibling, childNodes и т.д. (это геттеры). Объекты класса Node никогда не создаются. Но есть определённые классы узлов, 
    которые наследуют от него: Text – для текстовых узлов, Element – для узлов-элементов и более экзотический Comment – 
    для узлов-комментариев.
  - Element – это базовый класс для DOM-элементов. Он обеспечивает навигацию на уровне элементов: nextElementSibling, children и методы 
    поиска: getElementsByTagName, querySelector. Браузер поддерживает не только HTML, но также XML и SVG. Класс Element служит базой 
    для следующих классов: SVGElement, XMLElement и HTMLElement.
  - HTMLElement – является базовым классом для всех остальных HTML-элементов. От него наследуют конкретные элементы:
    - HTMLInputElement – класс для тега <input>,
    - HTMLBodyElement – класс для тега <body>,
    - HTMLAnchorElement – класс для тега <a>,
    - и так далее.., каждому тегу соответствует свой класс, который предоставляет определённые свойства и методы.

Для того, чтобы узнать имя класса DOM-узла, вспомним, что обычно у объекта есть свойство constructor. Оно ссылается на конструктор 
класса, и в свойстве constructor.name содержится его имя:
  document.body.constructor.name
Проверить наследование можно также при помощи instanceof:
  document.body instanceof HTMLBodyElement
DOM-узлы – это обычные JavaScript объекты. Для наследования они используют классы, основанные на прототипах.
console.dir(elem) выводит элемент в виде DOM-объекта, что удобно для анализа его свойств.


15. innerHTML: содержимое элемента
Свойство innerHTML позволяет получить HTML-содержимое элемента в виде строки.
Мы также можем изменять его. Это один из самых мощных способов менять содержимое на странице.
innerHTML+=» осуществляет перезапись
Другими словами, innerHTML+= делает следующее:
  - Старое содержимое удаляется.
  - На его место становится новое значение innerHTML (с добавленной строкой).
Так как содержимое «обнуляется» и переписывается заново, все изображения и другие ресурсы будут перезагружены.


16. outerHTML: HTML элемента целиком
Свойство outerHTML содержит HTML элемента целиком. Это как innerHTML плюс сам элемент.
Будьте осторожны: в отличие от innerHTML, запись в outerHTML не изменяет элемент. Вместо этого элемент заменяется целиком во внешнем контексте.
Мы можем писать в elem.outerHTML, но надо иметь в виду, что это не меняет элемент, в который мы пишем. Вместо этого создаётся новый 
HTML на его месте. Мы можем получить ссылки на новые элементы, обратившись к DOM.

17. Другие свойства node
Value/data - содержимое узла-неэлемента (текст, комментарий). Эти свойства практически одинаковые, обычно мы используем data. Можно изменять.
textContent - текст внутри элемента: HTML за вычетом всех <тегов>. Запись в него помещает текст в элемент, при этом все специальные символы и теги интерпретируются как текст. Можно использовать для защиты от вставки произвольного HTML кода.
hidden - когда значение установлено в true, делает то же самое, что и CSS display:none.
В зависимости от своего класса DOM-узлы имеют и другие свойства. Например у элементов <input> (HTMLInputElement) есть свойства value, type, у элементов <a> (HTMLAnchorElement) есть href и т.д. Большинство стандартных HTML-атрибутов имеют соответствующие свойства DOM.