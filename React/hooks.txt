https://www.youtube.com/watch?v=2Wp7QPTkpms&t

1. Хуки не требуют больших затрат, которые неизбежны в классах. Например, создание экземпляра класса и связывание обработчиков
событий в конструкторе
2. Проект, написанный на хуках имеет менее глубокое дерево компонент. В случае использования рендер-пропсов, компонентов
высшего порядка или контекста финальное дерево компонентов было бы в несколько раз больше


useCallback(()=>,[])
Функция как и любая другая функция в компоненте вызывается на каждый рендер и в качестве параметра колбэк приходит новая
функция и новый массив зависимостей, которые мы либо выбрасываем если зависимости до и после совпадают или сохраняем в
хранилище для будущего использования.
На каждый рендер мы создаем не только функцию(обработчки) но и массив зависимостей для них, а затем прокручиваем это все
через юзколбэк.
Использовать функцию юзколбэк это не значит улучшить перфоманс, а скорее даже ухудшить.
Функция юзколбэк вернет мемоизированный колбэк, который изменится если изменится одно из значений зависимостейю Это полезно
при передаче колбэков оптимизированным дочерним компонентам, которые полагаются на равенство ссылок для предотвращения
ненужных рендеров (например shouldComponentUpdate)



Функция обернутая в юзколбэк создается столько же раз сколько если бы она не была обернута