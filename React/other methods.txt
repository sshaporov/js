Другие методы API
В отличие от методов жизненного цикла, представленных выше (React вызывает их сам), методы, приведённые ниже,
можно вызывать из компонентов.
Их всего два: setState() и forceUpdate().

1. setState()
setState(updater, [callback])
setState() добавляет в очередь изменения в состоянии компонента. Также он указывает React, что компонент и его дочерние
элементы должны быть повторно отрендерены с обновлённым состоянием. Этот метод используется для обновления интерфейса в
ответ на обработчики событий и ответы сервера.
Думайте о setState(), как о запросе, а не как о команде немедленного обновления компонента. Для увеличения
производительности React может задержать его выполнение, а затем обновить несколько компонентов за один проход.
React не гарантирует моментальное применение изменений в состоянии.
Метод setState() не всегда обновляет компонент сразу. Он может группировать или откладывать обновление до следующего раза.
Это делает чтение this.state сразу после вызова setState() потенциальной ловушкой. Вместо этого используйте
componentDidUpdate() или колбэк setState() (setState(updater, callback)), каждый из которых гарантированно вызывается
после того как было применено обновление. Если вам нужно обновить состояние на основе предыдущего, используйте аргумент
updater, описанный ниже.
Первым аргументом передаётся функция updater, которая имеет следующий вид:

(state, props) => stateChange
state — ссылка на состояние компонента при изменении. Объект состояния не должен мутировать. Изменения должны проявляться
в виде нового объекта на основе входных данных из state и props. Предположим, что мы хотели бы увеличить значение
состояния с помощью props.step:

this.setState((state, props) => {
  return {counter: state.counter + props.step};
});


2. forceUpdate()
component.forceUpdate(callback)
По умолчанию при изменении состояния компонента или пропсов, происходит повторный рендер. Если ваш метод render() зависит
от некоторых других данных, вы можете указать React необходимость в повторном рендере, вызвав forceUpdate().
Вызов forceUpdate() приведёт к выполнению метода render() в компоненте, пропуская shouldComponentUpdate(). Это вызовет
обычные методы жизненного цикла для дочерних компонентов, включая shouldComponentUpdate() каждого дочернего компонента.
React по-прежнему будет обновлять DOM только в случае изменения разметки.
Чаще всего, forceUpdate() не используется. Вместо этого используются в render() данные из this.props и this.state.


